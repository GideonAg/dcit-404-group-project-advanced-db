CREATE TABLE Employee (
                          employeeNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          firstName VARCHAR2(100),
                          lastName VARCHAR2(100),
                          position VARCHAR2(100)
);

CREATE TABLE Location (
                          locationNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          locationName VARCHAR2(255),
                          maxSize NUMBER
);

CREATE TABLE Course (
                        courseNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        courseName VARCHAR2(255),
                        courseDescription VARCHAR2(500),
                        startDate DATE,
                        startTime DATE,
                        endDate DATE,
                        endTime DATE,
                        maxDelegates NUMBER,
                        confirmed CHAR(1), -- Assuming Y/N values
                        delivererEmployeeNo NUMBER,
                        courseTypeNo NUMBER,
                        FOREIGN KEY (delivererEmployeeNo) REFERENCES Employee(employeeNo),
                        FOREIGN KEY (courseTypeNo) REFERENCES CourseType(courseTypeNo)
);

CREATE TABLE Booking (
                         bookingNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         bookingDate DATE,
                         locationNo NUMBER,
                         courseNo NUMBER,
                         bookingEmployeeNo NUMBER,
                         FOREIGN KEY (locationNo) REFERENCES Location(locationNo),
                         FOREIGN KEY (courseNo) REFERENCES Course(courseNo),
                         FOREIGN KEY (bookingEmployeeNo) REFERENCES Employee(employeeNo)
);

CREATE TABLE CourseFee (
                           courseFeeNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           feeDescription VARCHAR2(255),
                           fee NUMBER(10,2), -- Assuming a decimal for monetary values
                           courseNo NUMBER,
                           FOREIGN KEY (courseNo) REFERENCES Course(courseNo)
);

CREATE TABLE CourseType (
                            courseTypeNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            courseTypeDescription VARCHAR2(255)
);

CREATE TABLE Invoice (
                         invoiceNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         dateRaised DATE,
                         datePaid DATE,
                         creditCardNo VARCHAR2(16),
                         holdersName VARCHAR2(100),
                         expiryDate VARCHAR2(5),
                         registrationNo NUMBER,
                         pMethodNo NUMBER,
                         FOREIGN KEY (registrationNo) REFERENCES Registration(registrationNo),
                         FOREIGN KEY (pMethodNo) REFERENCES PaymentMethod(pMethodNo)
);

-- Delegate Table
CREATE TABLE Delegate (
                          delegateNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          firstName VARCHAR2(100) NOT NULL,
                          lastName VARCHAR2(100) NOT NULL,
                          email VARCHAR2(255) NOT NULL UNIQUE,
                          phoneNumber VARCHAR2(15),
                          courseNo NUMBER,
                          FOREIGN KEY (courseNo) REFERENCES Course(courseNo)
);

CREATE TABLE Registration (
                              registrationNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              registrationDate DATE,
                              delegateNo NUMBER,
                              courseFeeNo NUMBER,
                              registerEmployeeNo NUMBER,
                              courseNo NUMBER,
                              FOREIGN KEY (delegateNo) REFERENCES Delegate(delegateNo),
                              FOREIGN KEY (courseFeeNo) REFERENCES CourseFee(courseFeeNo),
                              FOREIGN KEY (registerEmployeeNo) REFERENCES Employee(employeeNo),
                              FOREIGN KEY (courseNo) REFERENCES Course(courseNo)
);

CREATE TABLE PaymentMethod (
                               pMethodNo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                               methodName VARCHAR2(50),
                               description VARCHAR2(255)
);


-- Stored Procedure for Creating a Course
CREATE OR REPLACE PROCEDURE CreateCourse (
    p_courseName IN VARCHAR2,
    p_courseDescription IN VARCHAR2,
    p_startDate IN DATE,
    p_startTime IN DATE,
    p_endDate IN DATE,
    p_endTime IN DATE,
    p_maxDelegates IN NUMBER,
    p_confirmed IN CHAR,
    p_delivererEmployeeNo IN NUMBER,
    p_courseTypeNo IN NUMBER
) AS
BEGIN
INSERT INTO Course (
    courseName, courseDescription, startDate, startTime, endDate, endTime,
    maxDelegates, confirmed, delivererEmployeeNo, courseTypeNo
) VALUES (
             p_courseName, p_courseDescription, p_startDate, p_startTime, p_endDate, p_endTime,
             p_maxDelegates, p_confirmed, p_delivererEmployeeNo, p_courseTypeNo
         );
COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END CreateCourse;


-- Stored Procedure to Delete a Course
CREATE OR REPLACE PROCEDURE DeleteCourse (
    p_courseNo IN NUMBER
) AS
BEGIN
DELETE FROM Course
WHERE courseNo = p_courseNo;

IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No course found with the specified ID.');
END IF;

COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END DeleteCourse;


-- Retrieve a Course Using a Cursor
CREATE OR REPLACE PROCEDURE GET_COURSE_BY_ID_CURSOR(
    p_courseNo IN NUMBER,
    course_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN course_cursor FOR
        SELECT courseName, courseDescription, startDate, endDate, startTime, endTime, maxDelegates, confirmed
        FROM Course
        WHERE courseNo = p_courseNo;
END;
/

-- Update a Course Using a stored procedure
CREATE OR REPLACE PROCEDURE UPDATE_COURSE(
    p_courseNo IN NUMBER,
    p_courseName IN VARCHAR2,
    p_courseDescription IN VARCHAR2,
    p_startDate IN DATE,
    p_endDate IN DATE,
    p_startTime IN DATE,
    p_endTime IN DATE,
    p_maxDelegates IN NUMBER,
    p_confirmed IN CHAR
) AS
BEGIN
    UPDATE Course
    SET courseName = p_courseName,
        courseDescription = p_courseDescription,
        startDate = p_startDate,
        endDate = p_endDate,
        startTime = p_startTime,
        endTime = p_endTime,
        maxDelegates = p_maxDelegates,
        confirmed = p_confirmed
    WHERE courseNo = p_courseNo;
END;
/

